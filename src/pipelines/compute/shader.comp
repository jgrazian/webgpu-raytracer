#version 450

layout(local_size_x = 32, local_size_y = 32) in;

layout(set = 0, binding = 0, std140) uniform Globals {
    vec3 camera_origin;
    vec2 viewport;
    vec2 window_size;
    float aspect_ratio;
}
globals;

layout(set = 0, binding = 1, rgba32f) uniform image2D output_image;

// ---- Ray ----
struct Ray {
    vec3 orig;
    vec3 dir;
};

vec3 ray_at(Ray r, float t) {
    return (r.orig + t*r.dir);
}

// ---- Main Body ----

float hit_sphere(vec3 center, float radius, Ray r) {
    vec3 oc = r.orig - center;
    float a = dot(r.dir, r.dir);
    float b = 2.0 * dot(oc, r.dir);
    float c = dot(oc, oc) - radius*radius;
    float discriminant = b*b - 4*a*c;
    if (discriminant < 0) {
        return -1.0;
    } else {
        return (-b - sqrt(discriminant) ) / (2.0*a);
    }
}

vec3 ray_color(Ray r) {
    float t = hit_sphere(vec3(0.0, 0.0, -1.0), 0.5, r);
    if (t > 0.0) {
        vec3 N = normalize(ray_at(r, t) - vec3(0.0, 0.0, -1.0));
        return (0.5 * vec3(N.x + 1.0, N.y + 1.0, N.z + 1.0));
    }
    vec3 unit_direction = normalize(r.dir);
    t = 0.5*(unit_direction.y + 1.0);
    return ((1.0 - t) * vec3(1.0, 1.0, 1.0) + t * vec3(0.5, 0.7, 1.0));
}

void main() {
    // Random init stuff
    const float width = globals.window_size.x;
    const float height = globals.window_size.y;
    const float u = float(gl_GlobalInvocationID.x) / float(width - 1.0);
    const float v = float(gl_GlobalInvocationID.y) / float(height - 1.0);

    if (gl_GlobalInvocationID.x >= width || gl_GlobalInvocationID.y >= height) {
        return;
    }

    // Camera
    const vec3 origin = vec3(0.0);
    const vec3 horizontal = vec3(globals.viewport.x, 0.0, 0.0);
    const vec3 vertical = vec3(0.0, globals.viewport.y, 0.0);
    const vec3 upper_left_corner = origin - horizontal * 0.5 + vertical * 0.5 - vec3(0, 0, 1.0);

    // Main loop
    Ray r = Ray(origin, upper_left_corner + u*horizontal - v*vertical - origin);
    vec3 pixel_color = ray_color(r);

    // Output
    const ivec2 pixel_coordinates = ivec2(gl_GlobalInvocationID.xy);

    //vec4 pixel = vec4(gl_GlobalInvocationID.x / width, gl_GlobalInvocationID.y / height, 0.2, 1.0);

    imageStore(output_image, pixel_coordinates, vec4(pixel_color, 1.0));
}