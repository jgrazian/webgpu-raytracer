#version 450
precision highp float;

#include "common.glsl"
#include "ray.glsl"
#include "types.glsl"
#include "buffers.glsl"
#include "intersection.glsl"

// -------------
// Ray Color
// -------------
vec3 ray_color(Ray r, inout float seed, vec2 pixel) {
    int depth = 0;
    int max_depth = 10;

    HitRec rec;
    bool hitLight = false;

    vec3 res = vec3(0.0);
    vec3 throughput = vec3(1.0);

    while (depth < max_depth && hit_world(r, 0.001, FLT_MAX, rec) && !hitLight) {
        vec3 target;
        uint mat_type = materials.data[rec.mat_ptr].type;
        vec3 unit_direction = normalize(r.direction);

        //metal
        if (mat_type == 1) {
            target = rec.point + reflect(unit_direction, rec.normal);
        // dielectric
        } else if (mat_type == 2) {
            float ref_idx = 1.75;
            float eta = rec.front_face ? (1.0 / ref_idx) : ref_idx;

            float cos_theta = min(dot(-unit_direction, rec.normal), 1.0);
            float sin_theta = sqrt(1.0 - cos_theta*cos_theta);

            if (eta * sin_theta > 1.0 ) { // Too shallow angle -> reflect
                target = rec.point + reflect(unit_direction, rec.normal);
            } else { // Refract
                float reflect_prob = schlick(cos_theta, eta);
                if (rand(seed, pixel) > reflect_prob) { // Reflect?
                    target = rec.point + reflect(unit_direction, rec.normal);
                } 
                target = rec.point + refract(unit_direction, rec.normal, eta);
            }
        // Diffuse
        } else {
            target = rec.point + random_in_hemisphere(rec.normal, rand2(seed, pixel));
        }
        
        r.origin = rec.point;
        r.direction = target - rec.point;
        
        depth++;

        hitLight = materials.data[rec.mat_ptr].is_light;
        throughput *= materials.data[rec.mat_ptr].albedo;
    }

    if (hitLight) {
        res = materials.data[rec.mat_ptr].albedo * throughput;
    } else {
        res = vec3(0.0);
    }

    //bool hit_sky = depth < max_depth; //1 if we hit sky, 0 if max_depth is reached
    //float t = 0.5*(normalize(r.direction).y + 1.0);
    //res *= (float(hit_sky) * ((1.0 - t) * vec3(1.0, 1.0, 1.0) + t * vec3(0.5, 0.7, 1.0)));

    return res / float(depth);
}

void main() {
    // Random init stuff
    const ivec2 pixel_coordinates = ivec2(gl_GlobalInvocationID.xy);
    const vec2 image_size = globals.window_size;
    const vec2 uv = vec2(pixel_coordinates) / image_size;
    float seed = globals.seed;

    const vec2 sample_pos = (vec2(pixel_coordinates) + rand2(seed, uv)) / image_size;

    if (gl_GlobalInvocationID.x >= image_size.x || gl_GlobalInvocationID.y >= image_size.y) {
        return;
    }

    // Camera
    const vec3 look_at = vec3(0.0, 1.0, 0.0);
    const vec3 look_from = globals.camera_origin;
    const vec3 vup = vec3(0.0, 1.0, 0.0);

    vec3 w = normalize(look_from - look_at);
    vec3 uu = normalize(cross(vup, w));
    vec3 vv = cross(w, uu);
    vec3 horizontal = globals.viewport.x * uu;
    vec3 vertical = globals.viewport.y * vv;
    vec3 upper_left_corner = look_from - horizontal/2.0 + vertical/2.0 - w;

    // Main loop
    vec3 ray_dir = upper_left_corner + sample_pos.x*horizontal - sample_pos.y*vertical - look_from;
    Ray r = Ray(look_from, ray_dir);
    vec3 pixel_color = ray_color(r, seed, uv);

    // Output
    if (globals.num_frames == 0) {
        imageStore(output_image, pixel_coordinates, vec4(pixel_color, 1.0));
    } else {
        vec4 current_color = imageLoad(output_image, pixel_coordinates);
        vec3 new_color = current_color.xyz + pixel_color.xyz;
        //vec4 new_color = vec4(current_color.xyz + (pixel_color.xyz - current_color.xyz) / float(globals.num_frames), 1.0);
        imageStore(output_image, pixel_coordinates, vec4(new_color, 1.0));
    }

}
